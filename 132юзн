import math
import random
import numpy as np
import pandas as pd
from PIL import Image
import matplotlib.pyplot as plt
import csv


class Neurone:
    def __init__(self, n):
        self.number = n
        self.weight = np.random.uniform(0.001,0.2,n)
        self.bias = np.random.uniform(0.001,0.2)
        self.somma = 0

    def prevedere(self, x):
        self.somma = 0

        for i in range(self.number):
            self.somma += x[i] * self.weight[i] + self.bias
        return self.somma


class NeuralNetwork(Neurone):
    def __init__(self, number, input):
        for _ in range(number):
            self.nero = [Neurone(input)]

    def predict(self, x):
        return [neuron.prevedere(x) for neuron in self.nero]

    def fit_1(self, data, x, target_error, learning_rate=0.01):
        data_list = list(data)
        for _ in range(x):
            total_error = 0
            for inputs, target in data_list:
                for neuron in self.nero:
                    prediction = neuron.prevedere(inputs)
                    error = target - prediction
                    total_error += error ** 2
                    
                    for i in range(len(neuron.weight)):
                        neuron.weight[i] += learning_rate * error * inputs[i]

            mse = total_error / len(data_list)
            if mse <= target_error:
                return

    def fit_2(self, data, x, target_error, learning_rate):
        data_list = list(data)
        for _ in range(x):
            total_error = 0
            for inputs, target in data_list:
                for neuron in self.nero:
                    prediction = neuron.prevedere(inputs)
                    error = target - prediction
                    total_error += error * error
                    for i in range(len(neuron.weight)):
                        gradient = -2 * error * inputs[i]
                        neuron.weight[i] -= gradient

                    bias_gradient = -2 * error
                    neuron.bias -= learning_rate * bias_gradient

            if len(data_list) > 0:
                mse = total_error / len(data_list)
                if mse <= target_error:
                    return

def squared_error(y_true, y_pred):
    for i in range(len(y_true)):
        mas = 0.5 * ((y_true[i] - y_pred[i]) ** 2)
    return np.mean(mas)
data = pd.read_csv('test.csv')


x_1 = data[['x1', 'x2']].values
y_1 = data['y'].values

train_size = int(0.8 * len(x_1))
inputs = zip(x_1[:train_size], y_1[:train_size])

Neur_n = int(input("Enter number of neurone -> "))
num_input = int(input("Enter number of input -> "))


run1 = NeuralNetwork(Neur_n, num_input)
run2 = NeuralNetwork(Neur_n, num_input)

learning_rate = 0.0001  
target_error = 0.0001 
epochs = 1000
run1.fit_1(inputs, epochs, target_error, learning_rate)
run2.fit_2(inputs, epochs, target_error, learning_rate)

for id, neuron in enumerate(run1.nero):
    print(f"Нейрон {id + 1}: веса = {neuron.weight}, смещение = {neuron.bias}")

for id, neuron in enumerate(run2.nero):
    print(f"Нейрон {id + 1}: веса = {neuron.weight}, смещение = {neuron.bias}")

y_pred_1 = [run1.predict(x)[0] for x in x_1[train_size:]]
y_pred_2 = [run2.predict(x)[0] * (-1) for x in x_1[train_size:]]
# for inputs, target1, target2 in zip(y_1[train_size:], y_pred_1, y_pred_2):  
#    print(inputs, target1, target2)
mse_1 = squared_error(y_1[train_size:], y_pred_1)
mse_2 = squared_error(y_1[train_size:], y_pred_2)
print(f"Среднеквадратичная ошибка для первого варианта обучения: {mse_1}")
print(f"Среднеквадратичная ошибка для второго варианта обучения: {mse_2}")

data_2 = pd.read_csv('2lab_data.csv')
x_2 = data_2[['x1', 'x2', 'x3', 'x4', 'x5', 'x6']].values
y_2 = data_2[['y1', 'y2', 'y3']].values

train_size_2 = int(0.8 * len(x_2))

inputs = zip(x_2[:train_size_2], y_2[:train_size_2])

run3 = NeuralNetwork(3, 6)
print("Обучение во втором задании:")

run3.fit_3(inputs, learning_rate=0.0001, target_error=0.001, epochs=1000)
for id, neuron in enumerate(run3.nero):
    print(f"Нейрон {id + 1}: веса = {neuron.weight}, смещение = {neuron.bias}")

y_pred_2 = np.array([run3.predict(x)[0] for x in x_2[train_size_2:]])

mse_2 = [squared_error(y_2[train_size_2:, i], y_pred_2[:, i]) for i in range(y_2.shape[1])]

for i, error in enumerate(mse_2):
    print(f"Среднеквадратичная ошибка для выхода {i + 1}: {error}")
# X = []
# Y = []
# T = []
# with open('test2.csv', 'r') as datafile:
#     plotting = csv.reader(datafile, delimiter=',')
#     q = 1
#     for ROWS in plotting:
#         X.append(q)
#         Y.append(int(ROWS[2]))
#         q +=1
# plt.subplot(1,2,2)
# plt.plot(X[train_size:], Y[train_size:])
# plt.title('Эталон')
# plt.subplot(2,2,1)
# plt.plot([i for i in range(1, len(y_pred_1)+1)], y_pred_1)
# plt.title('Первый способ')
# plt.subplot(2,2,3)
# plt.plot([i for i in range(1, len(y_pred_2)+1)], y_pred_2)
# plt.title('Второй способ')
# plt.xlabel('X')
# plt.ylabel('Y')
# plt.show()